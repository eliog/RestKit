/*!
    \mainpage Yet Another JSON Library (YAJL)       
    \author Lloyd Hilaiel
    \date 2010

Yet Another JSON Library (YAJL) is a small event-driven (SAX-style)
JSON parser written in ANSI C, and a small validating JSON
generator. YAJL is released under the BSD license.

\section features Features

   -# Stream (incremental) parsing and generation of JSON
   -# ANSI C
   -# Human readable error messages with context
   -# tiny
   -# event driven
   -# support for generating "beautified" JSON 

\section usage Usage

The following code sample is a complete JSON "reformating" program.  It
demonstrates how to perform stream parsing and generation.  

\code
#include <rk_yajl/rk_yajl_parse.h>
#include <rk_yajl/rk_yajl_gen.h>

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

static int reformat_null(void * ctx)
{
    rk_yajl_gen g = (rk_yajl_gen) ctx;
    rk_yajl_gen_null(g);
    return 1;
}

static int reformat_boolean(void * ctx, int boolean)
{
    rk_yajl_gen g = (rk_yajl_gen) ctx;
    rk_yajl_gen_bool(g, boolean);
    return 1;
}

static int reformat_number(void * ctx, const char * s, unsigned int l)
{
    rk_yajl_gen g = (rk_yajl_gen) ctx;
    rk_yajl_gen_number(g, s, l);
    return 1;
}

static int reformat_string(void * ctx, const unsigned char * stringVal,
                           unsigned int stringLen)
{
    rk_yajl_gen g = (rk_yajl_gen) ctx;
    rk_yajl_gen_string(g, stringVal, stringLen);
    return 1;
}

static int reformat_map_key(void * ctx, const unsigned char * stringVal,
                            unsigned int stringLen)
{
    rk_yajl_gen g = (rk_yajl_gen) ctx;
    rk_yajl_gen_string(g, stringVal, stringLen);
    return 1;
}

static int reformat_start_map(void * ctx)
{
    rk_yajl_gen g = (rk_yajl_gen) ctx;
    rk_yajl_gen_map_open(g);
    return 1;
}


static int reformat_end_map(void * ctx)
{
    rk_yajl_gen g = (rk_yajl_gen) ctx;
    rk_yajl_gen_map_close(g);
    return 1;
}

static int reformat_start_array(void * ctx)
{
    rk_yajl_gen g = (rk_yajl_gen) ctx;
    rk_yajl_gen_array_open(g);
    return 1;
}

static int reformat_end_array(void * ctx)
{
    rk_yajl_gen g = (rk_yajl_gen) ctx;
    rk_yajl_gen_array_close(g);
    return 1;
}

static rk_yajl_callbacks callbacks = {
    reformat_null,
    reformat_boolean,
    NULL,
    NULL,
    reformat_number,
    reformat_string,
    reformat_start_map,
    reformat_map_key,
    reformat_end_map,
    reformat_start_array,
    reformat_end_array
};

static void
usage(const char * progname)
{
    fprintf(stderr, "usage:  %s <filename>\n"
            "    -m minimize json rather than beautify (default)\n"
            "    -u allow invalid UTF8 inside strings during parsing\n",
            progname);
    exit(1);

}

int 
main(int argc, char ** argv)
{
    rk_yajl_handle hand;
    static unsigned char fileData[65536];
    /* generator config */
    rk_yajl_gen_config conf = { 1, "  " };
	rk_yajl_gen g;
    rk_yajl_status stat;
    size_t rd;
    /* allow comments */
    rk_yajl_parser_config cfg = { 1, 1 };
    int done = 0;
    
    /* check arguments.  We expect exactly one! */
    if (argc == 2) {
        if (!strcmp("-m", argv[1])) {
            conf.beautify = 0;

        } else if (!strcmp("-u", argv[1])) {
            cfg.checkUTF8 = 0;
        } else {
            usage(argv[0]);
        }
    } else if (argc != 1) {
        usage(argv[0]);
    }
    
    g = rk_yajl_gen_alloc(&conf, NULL);

    /* ok.  open file.  let's read and parse */
    hand = rk_yajl_alloc(&callbacks, &cfg, NULL, (void *) g);
        
	while (!done) {
        rd = fread((void *) fileData, 1, sizeof(fileData) - 1, stdin);
        
        if (rd == 0) {
            if (!feof(stdin)) {
                fprintf(stderr, "error on file read.\n");
                break;
            }
            done = 1;
        }
        fileData[rd] = 0;
        
        if (done)
            /* parse any remaining buffered data */
            stat = rk_yajl_parse_complete(hand);
        else
            /* read file data, pass to parser */
            stat = rk_yajl_parse(hand, fileData, rd);

        if (stat != rk_yajl_status_ok &&
            stat != rk_yajl_status_insufficient_data)
        {
            unsigned char * str = rk_yajl_get_error(hand, 1, fileData, rd);
            fprintf(stderr, (const char *) str);
            rk_yajl_free_error(hand, str);
        } else {
            const unsigned char * buf;
            unsigned int len;
            rk_yajl_gen_get_buf(g, &buf, &len);
            fwrite(buf, 1, len, stdout);
            rk_yajl_gen_clear(g);
        }
    }

    rk_yajl_gen_free(g);
    rk_yajl_free(hand);
    
    return 0;
}
\endcode 
*/
